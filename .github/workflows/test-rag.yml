name: Test RAG Models

on:
  push:
    branches: ["main"]
    paths: ["backend/app/rag/**"]
  workflow_dispatch:
    inputs:
      RAGPipeline:
        description: 'RAGPipeline class name(s), comma-separated'
        required: true
        default: ''
        type: string

jobs:
  find-changed:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      matrix_json: ${{ steps.set-pipelines.outputs.matrix_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed RAG pipeline files (ending in Pipeline.py)
        id: set-pipelines
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^backend/app/rag/.*Pipeline\.py$' || true)
          PIPELINES=$(echo "$CHANGED" | sed 's|.*/||' | sed 's|\.py$||')
          JSON=$(printf '%s\n' "$PIPELINES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix_json=$JSON" >> $GITHUB_OUTPUT

  run-from-changes:
    if: github.event_name == 'push'
    needs: find-changed
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pipeline: ${{ fromJson(needs.find-changed.outputs.matrix_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Python & Install
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Create .env file
        run: |
          touch backend/.env
          echo "${{ secrets.BACKEND_ENV }}" > backend/.env
      - name: Run RAG Evaluation
        run: |
          echo "Running for ${{ matrix.pipeline }}"
          python rag_model/rag_evaluator.py ${{ matrix.pipeline }} rag_eval_${{ matrix.pipeline }}

  run-from-input:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.RAGPipeline != ''
    runs-on: ubuntu-latest
    outputs:
      matrix_json: ${{ steps.to-matrix.outputs.matrix_json }}
    steps:
      - name: Convert input to matrix JSON
        id: to-matrix
        run: |
          INPUT="${{ github.event.inputs.RAGPipeline }}"
          JSON=$(echo "$INPUT" | tr ',' '\n' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix_json=$JSON" >> $GITHUB_OUTPUT
  run-from-input-matrix:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.RAGPipeline != ''
    needs: run-from-input
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pipeline: ${{ fromJson(needs.run-from-input.outputs.matrix_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Python & Install
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Create .env file
        run: |
          touch backend/.env
          echo "${{ secrets.BACKEND_ENV }}" > backend/.env
      - name: Run RAG Evaluation
        run: |
          echo "Running for ${{ matrix.pipeline }}"
          python rag_model/rag_evaluator.py ${{ matrix.pipeline }} rag_eval_${{ matrix.pipeline }}
